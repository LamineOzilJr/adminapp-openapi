/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.groupeisi.generated.api;

import com.groupeisi.generated.model.ProduitDTO;
import com.groupeisi.generated.model.ProduitsResultListDTO;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-04T14:45:54.422661700Z[Atlantic/Reykjavik]")

@Validated
@Api(value = "Produit", description = "the Produit API")
public interface ProduitApi {

    default ProduitApiDelegate getDelegate() {
        return new ProduitApiDelegate() {};
    }

    /**
     * GET /produits : Get All Products
     *
     * @param currentPage  (required)
     * @param sizePage  (required)
     * @return SUCCESS (status code 200)
     *         or NOT FOUND (status code 404)
     *         or BAD REQUEST (status code 400)
     */
    @ApiOperation(value = "Get All Products", nickname = "getAllProducts", notes = "", response = ProduitsResultListDTO.class, tags={ "Produit", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "SUCCESS", response = ProduitsResultListDTO.class),
        @ApiResponse(code = 404, message = "NOT FOUND"),
        @ApiResponse(code = 400, message = "BAD REQUEST") })
    @RequestMapping(value = "/produits",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ProduitsResultListDTO> getAllProducts(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "currentPage", required = true) Integer currentPage,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "sizePage", required = true) Integer sizePage) throws Exception {
        return getDelegate().getAllProducts(currentPage, sizePage);
    }


    /**
     * GET /produits/{id} : Retrieve an product
     *
     * @param idProduit  (required)
     * @return SUCCESS (status code 200)
     *         or NOT FOUND (status code 404)
     *         or BAD REQUEST (status code 400)
     */
    @ApiOperation(value = "Retrieve an product", nickname = "getProduit", notes = "", response = ProduitDTO.class, tags={ "Produit", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "SUCCESS", response = ProduitDTO.class),
        @ApiResponse(code = 404, message = "NOT FOUND"),
        @ApiResponse(code = 400, message = "BAD REQUEST") })
    @RequestMapping(value = "/produits/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ProduitDTO> getProduit(@ApiParam(value = "",required=true) @PathVariable("idProduit") Integer idProduit) throws Exception {
        return getDelegate().getProduit(idProduit);
    }

}
